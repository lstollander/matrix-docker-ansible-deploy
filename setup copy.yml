---
- name: "Set up a Matrix server"
  hosts: "{{ target if target is defined else 'matrix_servers' }}"
  vars_files:
    - "{{ playbook_dir }}/group_vars/matrix_servers/vars.yml"
  become: true
  roles:
    - role: custom/install_docker
    # Most of the roles below are not distributed with the playbook, but downloaded separately using `ansible-galaxy` via the `just roles` command (see `justfile`).
    - role: galaxy/playbook_help
      tags:
        - setup-all
        - install-all

    - role: galaxy/systemd_docker_base

    - role: custom/matrix_playbook_migration

    - when: matrix_playbook_docker_installation_enabled | bool
      role: galaxy/docker
      vars:
        docker_install_compose: false
        docker_install_compose_plugin: false
      tags:
        - setup-docker
        - setup-all
        - install-docker
        - install-all

    - when: devture_docker_sdk_for_python_installation_enabled | bool
      role: galaxy/docker_sdk_for_python
      tags:
        - setup-docker
        - setup-all
        - install-docker
        - install-all

    - when: devture_timesync_installation_enabled | bool
      role: galaxy/timesync
      tags:
        - setup-timesync
        - setup-all
        - install-timesync
        - install-all

    - custom/matrix-base
    - custom/matrix-dynamic-dns
    - galaxy/exim_relay

    - role: galaxy/postgres

    - galaxy/valkey

    - role: custom/matrix-authentication-service
    - custom/matrix-corporal
    - custom/matrix-appservice-draupnir-for-all
    - custom/matrix-appservice-double-puppet
    - custom/matrix-alertmanager-receiver
    - custom/matrix-bridge-appservice-discord
    - custom/matrix-bridge-appservice-slack
    - custom/matrix-bridge-appservice-webhooks
    - custom/matrix-bridge-appservice-irc
    - custom/matrix-bridge-appservice-kakaotalk
    - custom/matrix-bridge-beeper-linkedin
    - custom/matrix-bridge-go-skype-bridge
    - custom/matrix-bridge-wechat
    - custom/matrix-bridge-mautrix-facebook
    - custom/matrix-bridge-mautrix-twitter
    - custom/matrix-bridge-mautrix-googlechat
    - custom/matrix-bridge-mautrix-instagram
    - custom/matrix-bridge-mautrix-meta-messenger
    - custom/matrix-bridge-mautrix-meta-instagram
    - custom/matrix-bridge-mautrix-telegram
    - custom/matrix-bridge-mautrix-signal
    - custom/matrix-bridge-mautrix-gmessages
    - custom/matrix-bridge-mautrix-whatsapp
    - custom/matrix-bridge-mautrix-wsproxy
    - custom/matrix-bridge-mautrix-discord
    - custom/matrix-bridge-mautrix-slack
    - custom/matrix-bridge-mx-puppet-discord
    - custom/matrix-bridge-mx-puppet-groupme
    - custom/matrix-bridge-mx-puppet-steam
    - custom/matrix-bridge-mx-puppet-slack
    - custom/matrix-bridge-mx-puppet-twitter
    - custom/matrix-bridge-mx-puppet-instagram
    - custom/matrix-bridge-postmoogle
    - custom/matrix-bridge-sms
    - custom/matrix-bridge-heisenbridge
    - custom/matrix-bridge-hookshot
    - custom/matrix-bot-matrix-reminder-bot
    - custom/matrix-bot-matrix-registration-bot
    - custom/matrix-bot-maubot
    - custom/matrix-bot-buscarron
    - custom/matrix-bot-baibot
    - custom/matrix-bot-honoroit
    - custom/matrix-bot-go-neb
    - custom/matrix-bot-mjolnir
    - custom/matrix-bot-draupnir
    - custom/matrix-bot-chatgpt
    - custom/matrix-cactus-comments
    - custom/matrix-cactus-comments-client
    - custom/matrix-rageshake
    - custom/matrix-synapse
    - custom/matrix-synapse-auto-compressor
    - custom/matrix-synapse-reverse-proxy-companion
    - custom/matrix-dendrite
    - custom/matrix-conduit
    - custom/matrix-conduwuit
    - custom/matrix-synapse-admin
    - custom/matrix-synapse-usage-exporter
    - galaxy/prometheus_node_exporter
    - galaxy/prometheus_postgres_exporter
    - custom/matrix-prometheus-nginxlog-exporter
    - galaxy/prometheus
    - galaxy/grafana
    - custom/matrix-prometheus-services-connect
    - custom/matrix-registration
    - custom/matrix-client-element
    - custom/matrix-client-hydrogen
    - custom/matrix-client-cinny
    - custom/matrix-client-schildichat
    - galaxy/jitsi
    - custom/matrix-user-verification-service
    - custom/matrix-ldap-registration-proxy
    - custom/matrix-ma1sd
    - custom/matrix-dimension
    - galaxy/etherpad
    - custom/matrix-sliding-sync
    - custom/matrix-email2matrix
    - custom/matrix-sygnal
    - galaxy/ntfy
    - custom/matrix-static-files
    - custom/matrix-coturn
    - custom/matrix-media-repo
    - custom/matrix-pantalaimon

    - role: galaxy/postgres_backup

    - role: galaxy/backup_borg

    - custom/matrix-user-creator
    - custom/matrix-common-after

    - role: galaxy/container_socket_proxy

    - role: galaxy/traefik

    - role: galaxy/traefik_certs_dumper

    - role: galaxy/auxiliary

    - when: devture_systemd_service_manager_enabled | bool
      role: galaxy/systemd_service_manager

    # This is pretty much last, because we want it to better serve as a "last known good configuration".
    # See: https://github.com/spantaleev/matrix-docker-ansible-deploy/pull/2217#issuecomment-1301487601
    - when: devture_playbook_state_preserver_enabled | bool
      role: galaxy/playbook_state_preserver
      tags:
        - setup-all
        - install-all

    - role: galaxy/playbook_runtime_messages


- name: "Set up a Monada host"
  hosts: "{{ target if target is defined else 'monada_host' }}"
  vars_files:
    - "{{ playbook_dir }}/group_vars/monada_host/vars.yml"
  become: true
  roles:
    # - role: custom/install_docker
    # Most of the roles below are not distributed with the playbook, but downloaded separately using `ansible-galaxy` via the `just roles` command (see `justfile`).
    - role: galaxy/playbook_help
      tags:
        - setup-all
        - install-all

    - role: galaxy/systemd_docker_base

      tags:
        - setup-timesync
        - setup-all
        - install-timesync
        - install-all

    - role: custom/monada
      when: monada_enabled | bool
      tags:
        - setup-monada
        - setup-all
        - install-monada
        - install-all


- name: "Set up a NEBULA host"
  hosts: "{{ target if target is defined else 'nebula_node' }}"
  become: true
  vars_files:
    - "{{ playbook_dir }}/group_vars/nebula_node/vars.yml"
  tasks:
  - name: Instalación común de Nebula
    block:
      - name: Crear directorio de instalación de Nebula
        ansible.builtin.file:
          path: /opt/nebula
          state: directory
          mode: '0755'

      - name: Descargar el paquete de Nebula
        ansible.builtin.get_url:
          url: "https://github.com/slackhq/nebula/releases/download/v1.9.5/nebula-linux-amd64.tar.gz"
          dest: /tmp/nebula.tar.gz
          mode: '0755'

      - name: Extraer Nebula
        ansible.builtin.unarchive:
          src: /tmp/nebula.tar.gz
          dest: /opt/nebula
          remote_src: yes

      - name: Asegurar que el binario de Nebula sea ejecutable
        ansible.builtin.file:
          path: /opt/nebula/nebula
          mode: '0755'
    become: yes

  # Bloque autoridad certificadora
  - name: Configurar autoridad certificadora
    when: nebula.es_ac | default(false) | bool
    block:

    - name: Crear directorio local
      ansible.builtin.file:
        path: "{{ playbook_dir }}/roles/custom/monada/files/nebula"
        state: directory
        mode: '0755'

    - name: Sincronizar carpeta desde el host remoto al controlador
      ansible.builtin.synchronize:
        src: "/opt/nebula"
        dest: "{{ playbook_dir }}/roles/custom/monada/files"
        mode: pull
      # delegate_to: localhost

    - name: Verificar si el host es autoridad certificadora (CA)
      ansible.builtin.debug:
          msg: "Este host es una autoridad certificadora (CA) de Nebula"

    - name: Comprobar si existe el certificado CA de Nebula
      ansible.builtin.stat:
          path: "{{ nebula.cert_path }}/ca.crt"
      register: ca_cert_stat

    - name: Generar certificado CA de Nebula si no existe
      ansible.builtin.command:
          cmd: "{{ nebula.bincert_path }} ca -name '{{ nebula.cert_name }}'"
          chdir: /opt/nebula
      when:
        - ca_cert_stat.stat.exists == false


  # Bloque para configurar el host faro (Lighthouse) de Nebula
  - name: Configurar host faro (Lighthouse) de Nebula
    when: nebula.es_faro | default(false) | bool
    block:
    - name: Comprobar si existe el certificado del lighhouse
      ansible.builtin.stat:
          path: "{{ nebula.cert_path }}/{{ inventory_hostname }}.crt"
      delegate_to: "{{ nebula.hostname_es_ca }}"
      register: ca_cert_faro_stat

    - name: Copiar ca.crt
      copy:
        src: "{{ playbook_dir }}/roles/custom/monada/files/nebula/ca.crt"
        dest: "/opt/nebula/ca.crt"
      when:
        - ca_cert_faro_stat.stat.exists == false

    - name: Generar certificado lighhouse de Nebula si no existe
      ansible.builtin.command:
          cmd: '{{ nebula.bincert_path }} sign -name "{{ inventory_hostname }}" -ip "{{ nebula.ip_faro }}/24" -groups "lighthouses"'
          chdir: /opt/nebula
      when:
        - ca_cert_faro_stat.stat.exists == false
      delegate_to: "{{ nebula.hostname_es_ca }}"

    - name: Sincronizar carpeta desde el host remoto al controlador
      when:
        - ca_cert_faro_stat.stat.exists == false
      ansible.builtin.synchronize:
        src: "/opt/nebula"
        dest: "{{ playbook_dir }}/roles/custom/monada/files"
        mode: pull
      delegate_to: "{{ nebula.hostname_es_ca }}"


    - name: Copiar configuración del Lighthouse
      ansible.builtin.copy:
        src: roles/custom/monada/files/nebula/{{ inventory_hostname }}.crt"
        dest: /opt/nebula/{{ inventory_hostname }}.crt
        mode: '0644'

    - name: Copiar configuración del Lighthouse
      ansible.builtin.copy:
        src: roles/custom/monada/files/nebula/{{ inventory_hostname }}.key"
        dest: /opt/nebula/{{ inventory_hostname }}.key
        mode: '0644'


    - name: Copiar configuración del Lighthouse
      ansible.builtin.template:
        src: roles/custom/monada/templates/nebula_lighthouse_config.yml.j2
        dest: /opt/nebula/config.yml
        mode: '0644'
      vars:

        nebula_role: "lighthouse"
        nebula_pki_ca_path: "/opt/nebula/ca.crt"
        nebula_pki_cert_path: "/opt/nebula/lighthouse.crt"
        nebula_pki_key_path: "/opt/nebula/lighthouse.key"
        nebula_lighthouse_interval: 60
        nebula_listen_host: "0.0.0.0"
        nebula_listen_port: 4242

    - name: Crear servicio systemd para Lighthouse Nebula
      ansible.builtin.template:
        src: roles/custom/monada/templates/nebula.service.j2
        dest: /etc/systemd/system/nebula.service
        mode: '0644'
      vars:
        nebula_config_path: "/opt/nebula/config.yml"

    - name: Recargar daemon de systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Habilitar y arrancar el servicio Nebula
      ansible.builtin.systemd:
        name: nebula
        enabled: yes
        state: started

  # Bloque para configurar un host común (no faro) de Nebula
  - name: Configurar host común de Nebula
    when: not nebula.es_faro | default(false) | bool
    block:
      - name: Comprobar si existe el certificado del node
        ansible.builtin.stat:
            path: "{{ nebula.cert_path }}/{{ inventory_hostname }}.crt"
        register: ca_cert_nodo_stat
        delegate_to: "{{ nebula.hostname_es_ca }}"

      - name: Generar certificado si no existe
        ansible.builtin.command:
            cmd: '{{ nebula.bincert_path }} sign -name "{{ inventory_hostname }}" -ip "{{ nebula.ip_node }}/24" -groups "nebula"'
            chdir: /opt/nebula
        when:
          - ca_cert_nodo_stat.stat.exists == false
        delegate_to: "{{ nebula.hostname_es_ca }}"

      - name: Copiar .crt del Lighthouse
        ansible.builtin.copy:
          src: roles/custom/monada/files/nebula/{{ inventory_hostname }}.crt"
          dest: /opt/nebula/{{ inventory_hostname }}.crt
          mode: '0644'

      - name: Copiar .key del Lighthouse
        ansible.builtin.copy:
          src: roles/custom/monada/files/nebula/{{ inventory_hostname }}.key"
          dest: /opt/nebula/{{ inventory_hostname }}.key
          mode: '0644'

      - name: Copiar ca.key
        copy:
          src: "{{ playbook_dir }}/roles/custom/monada/files/nebula/ca.key"
          dest: "/opt/nebula/ca.crt"
        when:
          - ca_cert_nodo_stat.stat.exists == false

      - name: Copiar configuración del host común
        ansible.builtin.template:
          src: roles/custom/monada/templates/nebula_common_config.yml.j2
          dest: /opt/nebula/config.yml
          mode: '0644'
        vars:
          nebula_role: "host"
          nebula_pki_ca_path: "/opt/nebula/ca.crt"
          nebula_pki_cert_path: "/opt/nebula/host.crt"
          nebula_pki_key_path: "/opt/nebula/host.key"
          nebula_lighthouse_addr: "200.234.230.183:4242"
          nebula_listen_host: "0.0.0.0"
          nebula_listen_port: 4242

      - name: Crear servicio systemd para Nebula
        ansible.builtin.template:
          src: roles/custom/monada/templates/nebula.service.j2
          dest: /etc/systemd/system/nebula.service
          mode: '0644'
        vars:
          nebula_config_path: "/opt/nebula/config.yml"

      - name: Recargar daemon de systemd
        ansible.builtin.systemd:
          daemon_reload: yes

      - name: Habilitar y arrancar el servicio Nebula
        ansible.builtin.systemd:
          name: nebula
          enabled: yes
          state: started








- name: "Set up a NEBULA host"
  hosts: "{{ target if target is defined else 'nebula_node' }}"
  become: true
  vars_files:
    - "{{ playbook_dir }}/group_vars/nebula_node/vars.yml"
  tasks:
  - name: Instalación común de Nebula
    block:
      - name: Crear directorio de instalación de Nebula
        ansible.builtin.file:
          path: /opt/nebula
          state: directory
          mode: '0755'

      - name: Descargar el paquete de Nebula
        ansible.builtin.get_url:
          url: "https://github.com/slackhq/nebula/releases/download/v1.9.5/nebula-linux-amd64.tar.gz"
          dest: /tmp/nebula.tar.gz
          mode: '0755'

      - name: Extraer Nebula
        ansible.builtin.unarchive:
          src: /tmp/nebula.tar.gz
          dest: /opt/nebula
          remote_src: yes

      - name: Asegurar que el binario de Nebula sea ejecutable
        ansible.builtin.file:
          path: /opt/nebula/nebula
          mode: '0755'
    tags:
      - install-all
      - install-nebula

  # Bloque autoridad certificadora
  - name: Configurar autoridad certificadora
    when: nebula.es_ac | default(false) | bool
    block:
    - name: Crear directorio local
      ansible.builtin.file:
        path: "{{ playbook_dir }}/roles/custom/monada/files/nebula"
        state: directory
        mode: '0755'

    - name: Sincronizar carpeta desde el host remoto al controlador
      ansible.builtin.synchronize:
        src: "/opt/nebula"
        dest: "{{ playbook_dir }}/roles/custom/monada/files"
        mode: pull
      # delegate_to: localhost

    tags:
      - install-all
      - install-nebula

  # Bloque para configurar el host faro (Lighthouse) de Nebula
  - name: Configurar host faro (Lighthouse) de Nebula
    tags:
      - install-all
      - install-nebula
    when: nebula.es_faro | default(false) | bool
    block:
    - name: Copiar ca.crt
      copy:
        src: "{{ playbook_dir }}/roles/custom/monada/files/nebula/ca.crt"
        dest: "/opt/nebula/ca.crt"

    - name: Copiar .crt del Lighthouse
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/roles/custom/monada/files/nebula/{{ inventory_hostname }}.crt"
        dest: /opt/nebula/{{ inventory_hostname }}.crt
        mode: '0644'

    - name: Copiar .key del Lighthouse
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/roles/custom/monada/files/nebula/{{ inventory_hostname }}.key"
        dest: /opt/nebula/{{ inventory_hostname }}.key
        mode: '0644'

    - name: Copiar configuración del Lighthouse
      ansible.builtin.template:
        src: "{{ playbook_dir }}/roles/custom/monada/templates/nebula_lighthouse_config.yml.j2"
        dest: /opt/nebula/config.yml
        mode: '0644'
      vars:
        nebula_role: "lighthouse"
        nebula_pki_ca_path: "/opt/nebula/ca.crt"
        nebula_pki_cert_path: "/opt/nebula/{{ inventory_hostname }}.crt"
        nebula_pki_key_path: "/opt/nebula/{{ inventory_hostname }}.key"
        nebula_lighthouse_interval: 60
        nebula_listen_host: "0.0.0.0"
        nebula_listen_port: 4242

    - name: Crear servicio systemd para Lighthouse Nebula
      ansible.builtin.template:
        src: "{{ playbook_dir }}/roles/custom/monada/templates/nebula.service.j2"
        dest: /etc/systemd/system/nebula.service
        mode: '0644'
      vars:
        nebula_config_path: "/opt/nebula/config.yml"

    - name: Recargar daemon de systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Habilitar y arrancar el servicio Nebula
      ansible.builtin.systemd:
        name: nebula
        enabled: yes
        state: started

  # Bloque para configurar un host común (no faro) de Nebula
  - name: Configurar host común de Nebula
    tags:
      - install-all
      - install-nebula
    when: not nebula.es_faro | default(false) | bool
    block:
      - name: Copiar ca.crt
        copy:
          src: "{{ playbook_dir }}/roles/custom/monada/files/nebula/ca.crt"
          dest: "/opt/nebula/ca.crt"

      - name: Copiar .crt del Lighthouse
        ansible.builtin.copy:
          src: "{{ playbook_dir }}/roles/custom/monada/files/nebula/{{ inventory_hostname }}.crt"
          dest: /opt/nebula/{{ inventory_hostname }}.crt
          mode: '0644'

      - name: Copiar .key del Lighthouse
        ansible.builtin.copy:
          src: "{{ playbook_dir }}/roles/custom/monada/files/nebula/{{ inventory_hostname }}.key"
          dest: /opt/nebula/{{ inventory_hostname }}.key
          mode: '0644'

      - name: Copiar configuración del host común
        ansible.builtin.template:
          src: "{{ playbook_dir }}/roles/custom/monada/templates/nebula_common_config.yml.j2"
          dest: /opt/nebula/config.yml
          mode: '0644'
        vars:
          nebula_role: "host"
          nebula_pki_ca_path: "/opt/nebula/ca.crt"
          nebula_pki_cert_path: "/opt/nebula/{{ inventory_hostname }}.crt"
          nebula_pki_key_path: "/opt/nebula/{{ inventory_hostname }}.key"
          nebula_lighthouse_addr: "{{ nebula.lighthouse_addr }}"
          nebula_listen_host: "0.0.0.0"
          nebula_listen_port: 4242

      - name: Crear servicio systemd para Nebula
        ansible.builtin.template:
          src: roles/custom/monada/templates/nebula.service.j2
          dest: /etc/systemd/system/nebula.service
          mode: '0644'
        vars:
          nebula_config_path: "/opt/nebula/config.yml"

      - name: Recargar daemon de systemd
        ansible.builtin.systemd:
          daemon_reload: yes

      - name: Habilitar y arrancar el servicio Nebula
        ansible.builtin.systemd:
          name: nebula
          enabled: yes
          state: started


